{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Ruliweb-HotS Dataset",
  "type": "object",
  "properties": {
    "hotsVersion": {
      "description": "Heroes of the Storm live server patch version",
      "$ref": "#/definitions/hotsVersionString"
    },
    "hotsPtrVersion": {
      "description": "Heroes of the Storm PTR patch version",
      "$ref": "#/definitions/hotsVersionString"
    },
    "heroes": {
      "description": "Collection of hero data",
      "type": "object",
      "propertyNames": {
        "pattern": "^\\w+$"
      },
      "minProperties": 1,
      "additionalProperties": {
        "$ref": "#/definitions/hero"
      }
    },
    "ptrHeroes": {
      "description": "Collection of hero data",
      "type": "object",
      "propertyNames": {
        "pattern": "^\\w+$"
      },
      "additionalProperties": {
        "$ref": "#/definitions/hero"
      }
    },
    "iconUrls": {
      "description": "Mapping of icon ID => icon URL",
      "type": "object",
      "additionalProperties": {
        "type": "string",
        "format": "uri"
      },
      "propertyNames": {
        "$ref": "#/definitions/iconId"
      }
    }
  },
  "required": [
    "hotsVersion",
    "heroes",
    "iconUrls"
  ],
  "definitions": {
    "hero": {
      "description": "Represents a hero object",
      "type": "object",
      "properties": {
        "name": {
          "$comment": "TODO: Add separate properties for English/Korean names of heroes, skills, and talents",
          "$ref": "#/definitions/trimmedString"
        },
        "title": {
          "$ref": "#/definitions/trimmedString"
        },
        "icon": {
          "$ref": "#/definitions/iconId"
        },
        "newRole": {
          "enum": [
            "tank",
            "bruiser",
            "healer",
            "support",
            "melee_assassin",
            "ranged_assassin"
          ]
        },
        "universe": {
          "type": "string",
          "enum": [
            "warcraft",
            "starcraft",
            "diablo",
            "classic",
            "overwatch",
            "nexus"
          ]
        },
        "stats": {
          "description": "Collection of the hero's units (unit === collection of stats)",
          "type": [
            "object",
            "array"
          ],
          "oneOf": [
            {
              "allOf": [
                {
                  "$ref": "#/definitions/unit"
                }
              ],
              "properties": {
                "unitName": false
              }
            },
            {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/unit"
                  }
                ],
                "required": [
                  "unitName"
                ]
              },
              "minItems": 2,
              "maxItems": 4
            }
          ]
        },
        "skills": {
          "description": "Collection of a hero's basic skills (available at level 0)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/skill"
          },
          "minItems": 1
        },
        "talents": {
          "description": "Collection of a hero's talents grouped by unlock level",
          "type": "object",
          "propertyNames": {
            "pattern": "^([1-9]|1\\d|20)$"
          },
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/talent"
            },
            "minItems": 1
          }
        }
      },
      "required": [
        "name",
        "title",
        "icon",
        "newRole",
        "universe",
        "stats",
        "skills",
        "talents"
      ]
    },
    "unit": {
      "description": "Represents a unit, which is a collection of stats",
      "type": "object",
      "properties": {
        "unitName": {
          "type": "string"
        },
        "hp": {
          "$ref": "#/definitions/scalingDecimalStat"
        },
        "hpRegen": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "multipleOf": 0.0001
            },
            "levelScaling": {
              "type": "number",
              "multipleOf": 0.0025
            }
          },
          "additionalProperties": false,
          "required": [
            "value",
            "levelScaling"
          ]
        },
        "mp": {
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "value": {
                  "type": "integer",
                  "exclusiveMinimum": 0
                },
                "levelAdd": {
                  "type": "integer",
                  "exclusiveMinimum": 0
                }
              },
              "additionalProperties": false,
              "required": [
                "value",
                "levelAdd"
              ]
            },
            {
              "type": "integer",
              "exclusiveMinimum": 0
            }
          ]
        },
        "mpRegen": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "multipleOf": 0.001
            },
            "levelAdd": {
              "type": "number",
              "multipleOf": 0.001
            }
          },
          "additionalProperties": false,
          "required": [
            "value",
            "levelAdd"
          ]
        },
        "chargeRegen": {
          "type": "number",
          "multipleOf": 0.0001
        },
        "radius": {
          "type": "number",
          "multipleOf": 0.0625
        },
        "damage": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/scalingDecimalStat"
              },
              "minItems": 2,
              "maxItems": 2
            },
            {
              "$ref": "#/definitions/scalingDecimalStat"
            }
          ]
        },
        "range": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "altName": {
                    "type": "string"
                  },
                  "value": {
                    "type": "number",
                    "multipleOf": 0.05
                  }
                },
                "required": [
                  "value"
                ],
                "additionalProperties": false
              },
              "minItems": 2,
              "maxItems": 2
            },
            {
              "type": "number",
              "multipleOf": 0.05
            }
          ]
        },
        "period": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "altName": {
                    "type": "string"
                  },
                  "value": {
                    "type": "number",
                    "multipleOf": 0.0001
                  }
                },
                "required": [
                  "value"
                ],
                "additionalProperties": false
              },
              "minItems": 2,
              "maxItems": 2
            },
            {
              "type": "number",
              "multipleOf": 0.0001
            }
          ]
        },
        "speed": {
          "type": "number",
          "multipleOf": 0.0001
        },
        "shields": {
          "$ref": "#/definitions/scalingIntegerStat"
        },
        "healEnergy": {
          "$ref": "#/definitions/scalingIntegerStat"
        },
        "charge": {
          "$ref": "#/definitions/positiveInteger"
        },
        "energy": {
          "$ref": "#/definitions/positiveInteger"
        },
        "energyRegen": {
          "$ref": "#/definitions/positiveInteger"
        },
        "zaryaEnergy": {
          "$ref": "#/definitions/positiveInteger"
        },
        "fury": {
          "$ref": "#/definitions/positiveInteger"
        },
        "brew": {
          "$ref": "#/definitions/positiveInteger"
        },
        "ammo": {
          "$ref": "#/definitions/positiveInteger"
        }
      },
      "required": [
        "hp",
        "hpRegen",
        "radius",
        "speed"
      ],
      "dependencies": {
        "hpRegen": [
          "hp"
        ],
        "mpRegen": [
          "mp"
        ],
        "energyRegen": [
          "energy"
        ]
      },
      "additionalProperties": false
    },
    "scalingDecimalStat": {
      "type": "object",
      "properties": {
        "altName": {
          "type": "string"
        },
        "value": {
          "type": "number",
          "multipleOf": 0.05
        },
        "levelScaling": {
          "type": "number",
          "multipleOf": 0.0025
        }
      },
      "additionalProperties": false,
      "required": [
        "value",
        "levelScaling"
      ]
    },
    "scalingIntegerStat": {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer",
          "exclusiveMinimum": 0
        },
        "levelScaling": {
          "type": "number",
          "multipleOf": 0.0025
        }
      },
      "additionalProperties": false,
      "required": [
        "value",
        "levelScaling"
      ]
    },
    "talent": {
      "description": "Represents a talent",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\S+$"
        },
        "name": {
          "type": "object",
          "properties": {
            "ko": {
              "$ref": "#/definitions/trimmedString"
            },
            "en": {
              "$ref": "#/definitions/trimmedString"
            }
          },
          "additionalProperties": false,
          "required": [
            "ko",
            "en"
          ]
        },
        "type": {
          "$comment": "If upgradeFor is present, this specifies the hotkey used to activate this talent (passive == no hotkey, active == 1 ~ 4). Otherwise, this specifies the type of skill (unlocked)",
          "enum": [
            "Q",
            "W",
            "E",
            "R",
            "D",
            "Z",
            "D - Q",
            "D - W",
            "D - E",
            "Q - Q",
            "Q - W",
            "Q - E",
            "R - Q",
            "R - W",
            "R - E",
            "Z - Q",
            "Z - W",
            "Z - E",
            "passive",
            "active",
            "D - active"
          ]
        },
        "upgradeFor": {
          "$comment": "Represents the ability upgraded by this talent",
          "enum": [
            "Q",
            "W",
            "E",
            "R",
            "D",
            "Z",
            "B",
            "D - Q",
            "D - W",
            "D - E",
            "Q - Q",
            "Q - W",
            "Q - E",
            "passive",
            "active",
            "Q / W",
            "Q / E",
            "W / E",
            "Z - Q",
            "Z - W",
            "Z - Q / Z - W"
          ]
        },
        "icon": {
          "$ref": "#/definitions/iconId"
        },
        "description": {
          "$comment": "type: string must be present on each entry in allOf; otherwise, json2ts does not recognize the entire subschema as a string",
          "allOf": [
            {
              "$ref": "#/definitions/trimmedString"
            },
            {
              "description": "All newlines must be normalized to LF",
              "type": "string",
              "not": {
                "pattern": "\\r"
              }
            },
            {
              "description": "Each line must be trimmed",
              "type": "string",
              "not": {
                "pattern": " \\n|\\n "
              }
            }
          ]
        },
        "shortDescription": {
          "$ref": "#/definitions/trimmedString"
        },
        "cooldown": {
          "type": "number",
          "exclusiveMinimum": 0,
          "multipleOf": 0.5
        },
        "cooldownPerAlly": {
          "type": "number",
          "exclusiveMinimum": 0,
          "multipleOf": 0.5
        },
        "rechargeCooldown": {
          "type": "number",
          "exclusiveMinimum": 0,
          "multipleOf": 0.5
        },
        "manaCost": {
          "type": "integer",
          "exclusiveMinimum": 0
        },
        "manaCostPerSecond": {
          "type": "integer",
          "exclusiveMinimum": 0
        },
        "extras": {
          "type": "object",
          "additionalProperties": {
            "oneOf": [
              {
                "$ref": "#/definitions/trimmedString"
              },
              {
                "type": "number"
              }
            ]
          },
          "propertyNames": {
            "$ref": "#/definitions/trimmedString"
          }
        }
      },
      "required": [
        "id",
        "name",
        "type",
        "icon",
        "description",
        "shortDescription"
      ],
      "additionalProperties": false
    },
    "skill": {
      "description": "Represents a skill",
      "allOf": [
        {
          "$ref": "#/definitions/talent"
        }
      ],
      "properties": {
        "upgradeFor": false
      }
    },
    "trimmedString": {
      "type": "string",
      "minLength": 1,
      "pattern": "^\\S([^]*\\S)?$"
    },
    "hotsVersionString": {
      "$comment": "type: string must be present on each entry in oneOf; otherwise, json2ts does not recognize the entire subschema as a string",
      "oneOf": [
        {
          "type": "string",
          "pattern": "^\\d+(\\.\\d+){1,3}$"
        },
        {
          "type": "string",
          "const": "HotS version (test data)"
        }
      ]
    },
    "iconId": {
      "type": "string",
      "pattern": "^[\\w'\\-]+$"
    },
    "positiveInteger": {
      "type": "integer",
      "exclusiveMinimum": 0
    }
  }
}